{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./autenticacion.service\";\nimport * as i2 from \"@angular/router\";\nexport class GuardGuard {\n  constructor(autenticacionServicio, rutas) {\n    this.autenticacionServicio = autenticacionServicio;\n    this.rutas = rutas;\n  }\n  canActivate(route, state) {\n    let currentUser = this.autenticacionServicio.UsuarioAutenticado;\n    if (currentUser && currentUser.accessToken) {\n      return true;\n    } else {\n      this.rutas.navigate(['/iniciar-sesion']);\n      return false;\n    }\n  }\n}\nGuardGuard.ɵfac = function GuardGuard_Factory(t) {\n  return new (t || GuardGuard)(i0.ɵɵinject(i1.AutenticacionService), i0.ɵɵinject(i2.Router));\n};\nGuardGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GuardGuard,\n  factory: GuardGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,UAAU;EACrBC,YAAoBC,qBAA0C,EAAUC,KAAY;IAAhE,0BAAqB,GAArBD,qBAAqB;IAA+B,UAAK,GAALC,KAAK;EAAS;EACtFC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IACxB,IAAIC,WAAW,GAAC,IAAI,CAACL,qBAAqB,CAACM,kBAAkB;IAC7D,IAAID,WAAW,IAAIA,WAAW,CAACE,WAAW,EAAC;MACzC,OAAO,IAAI;KACZ,MACI;MACH,IAAI,CAACN,KAAK,CAACO,QAAQ,CAAC,CAAC,iBAAiB,CAAC,CAAC;MACxC,OAAO,KAAK;;EAElB;;AAbWV,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAW,SAAVX,UAAU;EAAAY,YAFT;AAAM","names":["GuardGuard","constructor","autenticacionServicio","rutas","canActivate","route","state","currentUser","UsuarioAutenticado","accessToken","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Leo\\Desktop\\Dev\\FrontEnd-dinamico-YoProgramo\\miPortfolio\\src\\app\\services\\guard.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AutenticacionService } from './autenticacion.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GuardGuard implements CanActivate {\r\n  constructor(private autenticacionServicio:AutenticacionService, private rutas:Router){}\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n      let currentUser=this.autenticacionServicio.UsuarioAutenticado;\r\n      if (currentUser && currentUser.accessToken){\r\n        return true\r\n      }\r\n      else {\r\n        this.rutas.navigate(['/iniciar-sesion']);\r\n        return false;\r\n      }\r\n  }\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}